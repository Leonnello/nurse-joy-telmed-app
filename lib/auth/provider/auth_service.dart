import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:logger/logger.dart';
import 'package:nursejoyapp/auth//models/users/app_users.dart';

final logger = Logger();

class AuthService extends ChangeNotifier with WidgetsBindingObserver {
  final db = FirebaseFirestore.instance;
  final auth = FirebaseAuth.instance;
  AppUser? appUser;
  String? userID;
  User? user;

  AuthService() {
    WidgetsBinding.instance.addObserver(this);
    auth.authStateChanges().listen((User? user) async {
      this.user = user;
      userID = userID;
      if (user == null) {
        logger.i("User is signed out!");
      } else {
        logger.i("User is signed in!");
      }
      notifyListeners();
    });
  }

  Future<String?> signIn(String email, String password) async {
    try {
      final userCredentials = await FirebaseAuth.instance
          .signInWithEmailAndPassword(email: email, password: password);

      // set the app user
      loadUser(userCredentials.user!.uid);

      // update the status of the user to online if the user signs in
      updateUserStatus(user, true);
      return 'Success';
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found') {
        return ('No user found for that email.');
      } else if (e.code == 'wrong-password') {
        return ('Wrong password provided for that user.');
      } else {
        return e.message;
      }
    } catch (e) {
      return e.toString();
    }
  }

  Future<String?> signUp(String email, String password, String role) async {
    try {
      final credential = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(email: email, password: password);
      // get the user id generated by firebase auth
      final userID = credential.user!.uid;

      Map<String, dynamic> initUserData = {
        'email': email,
        'profile_pic': '',
        'full_name': '',
        'first_name': '',
        'last_name': '',
        'civil_status': '',
        'age': 0,
        'birthdate': null,
        'address': '',
        'phone_number': '',
        'role': 'user',
        'status_online': false,
      };

      appUser = AppUser.setDetails(userID, initUserData);
      appUser?.updateDetailsDB();

      notifyListeners();

      // create the doc for the new user
      await db.collection('users').doc(userID).set({
        'email': email,
        'profile_pic': '',
        'full_name': '',
        'first_name': '',
        'last_name': '',
        'civil_status': '',
        'age': 0,
        'birthdate': null,
        'address': '',
        'phone_number': '',
        'role': 'user',
        'status_online': false,
      });

      return 'Success';
    } on FirebaseAuthException catch (e) {
      if (e.code == 'weak-password') {
        return ('The password provided is too weak.');
      } else if (e.code == 'email-already-in-use') {
        return ('The account already exists for that email.');
      } else {
        return e.message;
      }
    } catch (e) {
      return e.toString();
    }
  }

  Future<void> signOut() async {
    await auth.signOut();

    // update the status to offline if the user signs out
    updateUserStatus(user, false);
  }

  Future<void> updateUserStatus(User? user, bool status) async {
    await db
        .collection('users')
        .doc(user!.uid)
        .update({'status_online': status});
    logger.i('Updated user ${user.uid} status to $status');
  }

  void appCycleChanged(AppLifecycleState state) async {
    if (state == AppLifecycleState.detached) {
      updateUserStatus(user, false);
      logger.i('App is in detached state and user status is set to offline');
    }
  }

  AppUser? getUserProfile(String? userID, String role) {
    appUser ??= AppUser(userID: userID!);

    switch (role) {
      case 'patient':
        appUser = Patient(userID: userID);
        return appUser;
      case 'doctor':
        appUser = Doctor(userID: userID);
        return appUser;
      case 'admin':
        appUser = Admin(userID: userID);
        return appUser;
      default:
        return appUser;
    }
  }

  void saveUserProfile(Map<String, dynamic> userProfile) async {
    final userRole = userProfile['role'];

    appUser ??= AppUser(userID: appUser!.userID);

    switch (userRole) {
      case 'patient':
        appUser = Patient.setDetails(userID, userProfile);
        break;
      case 'doctor':
        appUser = Doctor.setDetails(userID, userProfile);
        break;
      case 'admin':
        appUser = Admin.setDetails(userID, userProfile);
        break;
      default:
        appUser = AppUser.setDetails(userID, userProfile);
    }
    appUser?.updateDetailsDB();

    notifyListeners();
  }

  void loadUser(String userID) async {
    // assumes that structure of the document already tailored for the role.
    // ex. if role is patient, then the document will have fields specific to that role
    final userInfo = await db.collection('users').doc(userID).get();
    final userRole = userInfo['role'];
    switch (userRole) {
      case 'patient':
        appUser = Patient.setDetails(userID, userInfo.data()!);
      case 'doctor':
        appUser = Doctor.setDetails(userID, userInfo.data()!);
      case 'admin':
        appUser = Admin.setDetails(userID, userInfo.data()!);
      default:
        appUser = AppUser.setDetails(userID, userInfo.data()!);
    }
    notifyListeners();
  }
}
