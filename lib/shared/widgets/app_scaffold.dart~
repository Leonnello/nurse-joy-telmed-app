import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:nursejoyapp/shared/widgets/app_bottom_nav_bar.dart';
import 'package:nursejoyapp/shared/widgets/app_drawer.dart';

// HOW TO USE THIS SCAFFOLD:
//
// When providing content for the `body`, if the content might be taller
// than the screen, wrap it in a `SingleChildScrollView` to prevent overflows.
//
// Example:
// AppScaffold(
//   title: 'My Screen',
//   body: SingleChildScrollView(
//     child: Column(
//       children: [ /* Your long list of widgets */ ],
//     ),
//   ),
//   // ... other properties
// );

class AppScaffold extends StatefulWidget {
  final Widget body;
  final String title;
  final int selectedIndex;
  final Function(int) onItemTapped;
  final List<Widget>? actions;
  final bool showBackButton;
  final VoidCallback? onBackPressed;
  final Widget? floatingActionButton;

  const AppScaffold({
    super.key,
    required this.body,
    required this.title,
    required this.selectedIndex,
    required this.onItemTapped,
    this.actions,
    this.showBackButton = false,
    this.onBackPressed,
    this.floatingActionButton,
  });

  @override
  State<AppScaffold> createState() => _AppScaffoldState();
}

class _AppScaffoldState extends State<AppScaffold> {
  // NOTE: The animation controllers are no longer used in the refactored AppBar
  // but are kept here in case you want to animate other elements.
  // late AnimationController _appBarController;
  // late Animation<double> _appBarAnimation;

  @override
  void initState() {
    super.initState();
    // _appBarController = AnimationController(
    //   duration: const Duration(milliseconds: 300),
    //   vsync: this,
    // )..forward();
    // _appBarAnimation = CurvedAnimation(
    //   parent: _appBarController,
    //   curve: Curves.easeInOut,
    // );
  }

  @override
  void dispose() {
    // _appBarController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade50,
      // Using the standard AppBar is the most robust way to prevent overflows.
      appBar: _buildAppBar(),
      drawer: const AppDrawer(),
      // The body is now cleaner. The responsibility for scrolling and SafeArea
      // is delegated to the screen that uses this scaffold.
      body: widget.body,
      bottomNavigationBar: AppBottomNavBar(
        currentIndex: widget.selectedIndex,
        onTap: widget.onItemTapped,
      ),
      floatingActionButton: widget.floatingActionButton,
    );
  }

  double _responsiveSize(double size) {
    final screenWidth = MediaQuery.of(context).size.width;
    const double baseWidth = 375.0;
    return size * (screenWidth / baseWidth);
  }

  /// âœ… Uses the standard AppBar widget for robust, adaptive layout.
  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      // Let AppBar handle its own height. `toolbarHeight` is an optional override.
      toolbarHeight: 65,
      // `leading` is the conventional place for a menu or back button.
      // AppBar will automatically show a back button on navigation if this is null.
      leading: _buildAppBarButton(
        icon: widget.showBackButton
            ? Icons.arrow_back_ios_new_rounded
            : Icons.menu_rounded,
        onPressed: widget.showBackButton
            ? (widget.onBackPressed ?? () => context.pop())
            : () => Scaffold.of(context).openDrawer(),
      ),
      leadingWidth: _responsiveSize(80),
      title: Text(
        widget.title,
        style: TextStyle(
          color: Colors.white,
          fontSize: _responsiveSize(22),
          fontWeight: FontWeight.bold,
        ),
      ),
      centerTitle: true,
      // `actions` is the dedicated property for trailing icons.
      actions: widget.actions ??
          [
            _buildAppBarButton(
              icon: Icons.notifications_rounded,
              onPressed: () => context.go('/activity-list'),
              showBadge: true,
            ),
            // Add spacing to the right of the last action item if needed.
            SizedBox(width: _responsiveSize(12)),
          ],
      elevation: 8,
      shadowColor: const Color(0xFF58f0d7).withOpacity(0.4),
      // `flexibleSpace` is the correct property for a custom background like a gradient.
      flexibleSpace: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Color(0xFF58f0d7),
              Color(0xFF4dd0e1),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildAppBarButton({
    required IconData icon,
    required VoidCallback onPressed,
    bool showBadge = false,
  }) {
    // The margin is removed as AppBar's `leading` and `actions` properties handle spacing.
    return Center(
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.2),
          borderRadius: BorderRadius.circular(_responsiveSize(12)),
          border: Border.all(
            color: Colors.white.withOpacity(0.3),
            width: 1,
          ),
        ),
        child: Material(
          color: Colors.transparent,
          child: InkWell(
            borderRadius: BorderRadius.circular(_responsiveSize(12)),
            onTap: onPressed,
            child: Container(
              padding: EdgeInsets.all(_responsiveSize(12)),
              child: Stack(
                clipBehavior: Clip.none,
                children: [
                  Icon(
                    icon,
                    color: Colors.white,
                    size: _responsiveSize(24),
                  ),
                  if (showBadge)
                    Positioned(
                      right: -2,
                      top: -2,
                      child: Container(
                        width: _responsiveSize(9),
                        height: _responsiveSize(9),
                        decoration: BoxDecoration(
                          color: const Color(0xfff56363),
                          shape: BoxShape.circle,
                          border: Border.all(color: Colors.white, width: 1.5),
                        ),
                      ),
                    ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}